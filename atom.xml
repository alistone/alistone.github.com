<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[微风流云的Blog]]></title>
  <link href="http://alistone.github.io/atom.xml" rel="self"/>
  <link href="http://alistone.github.io/"/>
  <updated>2014-03-05T11:33:52+08:00</updated>
  <id>http://alistone.github.io/</id>
  <author>
    <name><![CDATA[alistone]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Core Motion Framework学习笔记]]></title>
    <link href="http://alistone.github.io/blog/2014/03/03/core-motion-frameworkxue-xi-bi-ji/"/>
    <updated>2014-03-03T15:22:55+08:00</updated>
    <id>http://alistone.github.io/blog/2014/03/03/core-motion-frameworkxue-xi-bi-ji</id>
    <content type="html"><![CDATA[<p>本文是个人学习Core Motion Framework后所做的笔记，主要关注加速度传感器和陀螺仪数据，其他方面暂未涉及。</p>

<h3>Core Motion Framework简介</h3>

<p>如果你只是想获取手机的大致朝向（比如横屏竖屏）请使用UIDevice，如果你只是想监测Shake事件请使用Shake-Motion Events，只有你需要访问加速度传感器和陀螺仪的数据时才需要使用Core Motion框架，该框架提供传感器采集到的原始数据以及经过算法加工后的数据（例如消除传感器误差后的数据）。</p>

<h3>传感器介绍</h3>

<ul>
<li><strong>加速度传感器</strong>分别测量沿X、Y、Z三个轴的加速度值，手机上三个轴的指向参见下图。当手机水平朝上静止放置时Z轴上有一个朝下的重力加速度，因为朝向与+Z相反所以加速度为负值，另外框架里加速度的单位为G（重力加速度），所以此时Z轴上的加速度值为-1，而X轴Y轴的加速度值为0。当手机以其他非水平方向静止放置时，重力加速度会分解到XYZ轴上。</li>
</ul>


<p style="text-align:center;"><img src="http://alistone.github.io/images/2014/03/1.png" height="390" width="380" alt="" /></p>

<ul>
<li><strong>陀螺仪</strong>分别测量沿X、Y、Z三个轴的旋转速度，并通过右手法则判断旋转速度的正负，手机上三个轴的指向以及正负旋转方向参见下图。举例来说当手机水平纵向放置时（Home按钮在底部），翘起头部则在X轴有一个正的旋转速度。另外框架里旋转速度的单位为旋转的弧度每秒。</li>
</ul>


<p style="text-align:center;"><img src="http://alistone.github.io/images/2014/03/2.png" height="401" width="345" alt="" /></p>

<h3>Core Motion Framework介绍</h3>

<p>Core Motion Framework的整体结构见下图，其中CMMotionManager是框架的管理类，提供创建实例、设置数据采集频率、开启数据采集、关闭数据采集等等功能。</p>

<p style="text-align:center;"><img src="http://alistone.github.io/images/2014/03/3.png" height="374" width="432" alt="" /></p>

<p>CMAccelerometerData实际包含一个结构体acceleration(类型：CMAcceleration)，提供三轴加速度。</p>

<pre><code>typedef struct {
        double x;
        double y;
        double z;
} CMAcceleration;
// A structure containing 3-axis acceleration data. 
</code></pre>

<p>CMGyroData实际包含一个结构体rotationRate(类型：CMRotationRate)，提供三轴旋转速度。</p>

<pre><code>typedef struct {
        double x;
        double y;
        double z;
} CMRotationRate;
// A structure containing 3-axis rotation rate data.
</code></pre>

<p>CMDeviceMotion包含下面五种数据，其中已经将重力加速度和用户加速度独立开来，手机整体的加速度等于重力加速度和用户加速度之和。</p>

<pre><code>（1）attitude(类型：CMAttitude)
 // Returns the attitude of the device.  

（2）rotationRate(类型：CMRotationRate)
 // Returns the rotation rate of the device for devices with a gyro.  

（3）gravity(类型：CMAcceleration)
 // Returns the gravity vector expressed in the device's reference frame.  

（4）userAcceleration(类型：CMAcceleration)
 // Returns the acceleration that the user is giving to the device.  

 // 磁力数据不在本文关注范围内
（5）magneticField(类型：CMCalibratedMagneticField)
 // Returns the magnetic field vector with respect to the device for devices with a magnetometer.
</code></pre>

<p>CMAttitude主要包含下面五种数据。手机水平朝上放置时roll值和pitch值都为0，yaw值默认以开始采集时的朝向为0值（注：当使用某些CMAttitudeReferenceFrame时yaw的0值可能指向某个固定方向。），手机当前attitude的roll、pitch、yaw值是指从三个轴的0值经过每个轴上多少弧度的旋转才能形成当前attitude，注意三个轴上都有旋转时优先计算roll轴再pitch轴最后yaw轴。</p>

<pre><code>@property(readonly, nonatomic) double roll;
 // Returns the roll of the device in radians. 

@property(readonly, nonatomic) double pitch;
 // Returns the pitch of the device in radians. 

@property(readonly, nonatomic) double yaw;
 // Returns the yaw of the device in radians. 

// 下面的旋转矩阵和四元数不在本文关注范围内
@property(readonly, nonatomic) CMRotationMatrix rotationMatrix;
 // Returns a rotation matrix representing the device's attitude.  

@property(readonly, nonatomic) CMQuaternion quaternion;
 // Returns a quaternion representing the device's attitude.
</code></pre>

<h3>Core Motion Framework开发</h3>

<p><strong>1、创建CMMotionManager实例：</strong><br/>
一个App只应该创建一个CMMotionManager实例，创建多个实例会影响数据的采集速度。<br/>
<strong>2、选择合适的数据采集方式：</strong><br/>
<strong>Pull：</strong>App需要时主动从CMMotionManager中获取最新的Motion数据。 <br/>
<strong>Push：</strong>App指定数据采集间隔时间并实现处理Motion数据的block，Core Motion会将每次采集的数据传递给block并将block添加到你给定的NSOperationQueue中执行。<br/>
<strong>Pull和Push方式各自适用的场景见下表：</strong></p>

<p><img src="http://alistone.github.io/images/2014/03/4.png" alt="" /></p>

<p><strong>3、设置合适的数据采集间隔：</strong><br/>
在满足App需求的前提下应该设置尽量大的数据采集间隔，数据采集的间隔越大传递给App的事件越少，这样可以节省手机电量。下表列举了通常使用的数据采集频率以及在这些频率下可以实现的功能：</p>

<p><img src="http://alistone.github.io/images/2014/03/5.png" alt="" /></p>

<p><strong>4、即时关闭数据采集功能：</strong><br/>
当App不需要再采集Motion数据时应该即时关闭采集功能，这样可以节省手机电量。 <br/>
<strong>5、开发示例：</strong></p>

<pre><code>- (void)startAccelerometer{
    // Create a CMMotionManager
    mManager = [[CMMotionManager alloc] init];
    // Check whether the accelerometer is available
    if (mManager.isAccelerometerAvailable) {
        // Determine the update interval
        NSTimeInterval updateInterval = 0.02;
        // Assign the update interval to the motion manager
        [mManager setAccelerometerUpdateInterval:updateInterval];
        // pull
        //[mManager startAccelerometerUpdates];
        //NSTimer* timer = [NSTimer scheduledTimerWithTimeInterval:0.1 target:self
        //                    selector:@selector(checkAccelerometer) userInfo:nil repeats:YES];
        //[timer fire];
        // push
        [mManager startAccelerometerUpdatesToQueue:[NSOperationQueue currentQueue]
            withHandler:^(CMAccelerometerData *accelerometerData, NSError *error) {
                NSLog(@"latest X-axis acceleration:%f", accelerometerData.acceleration.x);
            }];
    }
}

- (void)checkAccelerometer{
    CMAccelerometerData* latestData = mManager.accelerometerData;
    NSLog(@"latest X-axis acceleration:%f", latestData.acceleration.x);
}

- (void)stopAccelerometer{
    if (mManager.isAccelerometerActive) {
        [mManager stopAccelerometerUpdates];
    }
}
</code></pre>

<h3>参考资料</h3>

<ul>
<li><a href="http://www.kunli.info/2010/07/07/mobile-device-sensor/">移动设备智能化的基石–从iPhone4的传感器谈起</a></li>
<li><a href="http://www.kunli.info/2010/07/30/motion/">iOS4中Core Motion框架的介绍和使用</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/Introduction/Introduction.html">Event Handling Guide for iOS</a></li>
<li><a href="http://blog.csdn.net/kingkong1024/article/details/11605143">CoreMotion可以测到的各种值</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCD学习笔记]]></title>
    <link href="http://alistone.github.io/blog/2014/02/25/gcdxue-xi-bi-ji/"/>
    <updated>2014-02-25T13:58:49+08:00</updated>
    <id>http://alistone.github.io/blog/2014/02/25/gcdxue-xi-bi-ji</id>
    <content type="html"><![CDATA[<p>本文是个人学习GCD后所做的笔记，如有错漏欢迎指正。</p>

<h3>GCD简介</h3>

<p>GCD（Grand Central Dispatch）是一种简单易用的异步执行任务的技术，一般来说GCD会将任务封装到block中然后提交给dispatch queue，dispatch queue会根据任务提交的顺序串行或者并行的执行任务。</p>

<h3>Dispatch Queue的分类</h3>

<ul>
<li>Serial Dispatch Queue：添加到queue中的block按FIFO的顺序串行处理。</li>
<li>Concurrent Dispatch Queue：添加到queue中的block按FIFO顺序调度处理，前一个block调度后无须等block执行完毕就可以调度下一个block，所以不同的block是并发执行的，具体并发执行的线程数GCD会根据系统负载自动调整。</li>
</ul>


<h3>Main Dispatch Queue和Global Dispatch Queue</h3>

<ul>
<li>Main Dispatch Queue：通过<code>dispatch_get_main_queue()</code>获取，在主线程中执行，属于Serial Dispatch Queue。</li>
<li>Global Dispatch Queue：通过<code>dispatch_get_global_queue(priority,0)</code>获取，属于全局的Concurrent Dispatch Queue，其中priority指定queue的优先级，优先级高的queue中的block会优先调度。</li>
</ul>


<h3>自定义Dispatch Queue</h3>

<ul>
<li>通过<code>dispatch_queue_t queue = dispatch_queue_create("queueName", attr);</code>创建自定义dispatch queue，attr为NULL或DISPATCH_QUEUE_SERIAL则创建的是Serial Dispatch Queue，attr为DISPATCH_QUEUE_CONCURRENT则创建的是Concurrent Dispatch Queue。自定义的dispatch queue需要在结束时调用<code>dispatch_release(queue)</code>释放。</li>
<li>自定义dispatch queue的优先级相当于DISPATCH_QUEUE_PRIORITY_DEFAULT,使用<code>dispatch_set_target_queue(queue,globalQueue)</code>可以将queue设置成与globalQueue相同优先级。</li>
</ul>


<h3>GCD相关的API</h3>

<ul>
<li><code>dispatch_sync(queue,block)</code>：<br/>
将block同步添加到queue中，并等待block执行完毕再返回。慎用这个方法因为容易引起死锁，比如在主线程中调用dispatch_sync(dispatch_get_main_queue(),^{});</li>
<li><code>dispatch_async(queue,block)</code>：<br/>
将block异步添加到queue中并直接返回，无须等待。</li>
<li><code>dispatch_after(delayTime,queue,block)</code>：<br/>
在delayTime后将block添加到queue中执行。</li>
<li><code>dispatch_once(&amp;onceToken,block)</code>：<br/>
保证应用程序中只执行一次block。</li>
<li><code>dispatch_barrier_sync(queue,block)</code>和<code>dispatch_barrier_async(queue,block)</code>：<br/>
类似于dispatch_sync和dispatch_async添加block到queue中，只是这个block被标记为barrier，意思是barrier前添加的所有block执行完毕后才执行barrier，barrier执行完毕后才执行后面添加的block。</li>
<li><code>dispatch_suspend(queue)</code>和<code>dispatch_resume(queue)</code>：<br/>
挂起和恢复指定queue，对queue中已经执行的block没影响。</li>
<li><code>dispatch_apply(count,queue,^(size_t idx){})</code>：<br/>
将block重复添加到queue中count次，block有一个参数指明重复次数，取值为0~count-1，该方法需要等所有block执行完毕才返回。</li>
<li><p>dispatch_group：</p>

<pre><code>  dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0); 
  dispatch_group_t group = dispatch_group_create(); 
  dispatch_group_async(group, queue, block1); 
  dispatch_group_async(group, queue, block2); 
  dispatch_group_async(group, queue, block3); 
  dispatch_group_notify(group, queue, block4); 
  long result = dispatch_group_wait(group,timeout);
</code></pre>

<p><code>dispatch_group_notify(group,queue,block4)</code>会等到queue中所有block全部执行完毕后再异步添加block4到queue中，这样就保证了block4在block1、block2、block3全部执行完毕后再执行。
<code>dispatch_group_wait(group,timeout)</code>会同步等待group中所有block执行完毕，或者等到指定timeout时间为止，返回result为0则表示所有block全部执行完毕，非0则表示还有block在执行。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下搭建github博客简记]]></title>
    <link href="http://alistone.github.io/blog/2014/02/18/mac%E4%B8%8B%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2%E7%AE%80%E8%AE%B0/"/>
    <updated>2014-02-18T19:56:50+08:00</updated>
    <id>http://alistone.github.io/blog/2014/02/18/mac下搭建github博客简记</id>
    <content type="html"><![CDATA[<p>本文是博客搭建流程极简版，主要目的是记录下来给自己备忘，具体搭建流程请参考<strong>破船之家</strong><a href="http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/">[1]</a>、<a href="http://beyondvincent.com/blog/2013/07/27/107-hello-page-of-github/">[2]</a></p>

<h3>1、安装Ruby</h3>

<p>安装RVM</p>

<pre><code>curl -L https://get.rvm.io | bash -s stable --ruby
</code></pre>

<p>安装最新版本的Ruby</p>

<pre><code>rvm list known
rvm install latest-version
rvm use latest-version
rvm rubygems latest
</code></pre>

<h3>2、安装Octopress</h3>

<p>先将octopress从github上clone到本地</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
</code></pre>

<p>安装相关依赖</p>

<pre><code>cd octopress
gem install bundler
bundler install
</code></pre>

<p>安装Octopress主题</p>

<pre><code>rake install
</code></pre>

<h3>3、配置Octopress</h3>

<p>略。</p>

<h3>4、部署博客到github</h3>

<p>在github创建username.github.com的repo，然后在Octopress主目录初始化仓库配置</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>创建新博客</p>

<pre><code>rake new_post["title"]
</code></pre>

<p>找到创建的博客文件添加具体内容，然后使用下面命令发布</p>

<pre><code>rake generate
rake deploy
</code></pre>

<p>以上步骤均成功后访问username.github.com可以看到正常页面。</p>

<h3>5、解析godaddy域名到github博客</h3>

<p>在godaddy上删除原有A记录新加一条A记录<code>@ 204.232.175.78</code>，再添加CNAME记录<code>http username.github.com</code>。另外github仓库下source目录新建CNAME文件，内容为要解析的域名。</p>
]]></content>
  </entry>
  
</feed>
